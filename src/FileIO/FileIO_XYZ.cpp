#include "FileIO/FileIO_XYZ.h"

#include <sstream>
#include <regex>

using namespace ctkIO;

void FileIO_XYZ::read(ctkData::Molecule& mol) const {
    std::ifstream file(_fname);
    if (!file.is_open()) {
        throw std::runtime_error("Error opening file");
        return;
    }
    std::string line;
    int nAtoms{ 0 };

    // Parse the number of atoms from the first line in the file 
    if (!getline(file, line)) {
        throw std::runtime_error("Error reading number of atoms");
    }
    std::regex nAtomsRegex(R"(^\d+$)"); // Ensure valid integer
    std::smatch nAtomsMatch;
    if (!std::regex_match(line, nAtomsMatch, nAtomsRegex)) {
        throw std::runtime_error("Invalid number of atoms format");
    }
    nAtoms = std::stoi(nAtomsMatch[0]);

    getline(file, line); // read the comment line 

    // Define the regex variables
    std::regex dataRegex(R"(^(\w+)\s+(\S+)\s+(\S+)\s+(\S+)$)"); // Match atom symbol, coordinates
    std::smatch dataMatch;

    // Parse the remaining atom data line by line 
    for (int i = 0; i < nAtoms; ++i) {
        if (!getline(file, line)) {
            throw std::runtime_error("Error reading atom data");
        }
        if (regex_match(line, dataMatch, dataRegex)) {
            mol.addAtom(dataMatch[1], std::stod(dataMatch[2]), std::stod(dataMatch[3]), std::stod(dataMatch[4]));
        }
    }

    if (mol.nAtoms() != nAtoms) {
        throw std::runtime_error("Invalid xyz format - Error in file parse.");
    }


    file.close();

    // Calculate bonding as default for xyz files
    mol.calculateBonding();

}


void FileIO_XYZ::write(const ctkData::Molecule& mol) const {
    std::ofstream file(_fname);
    if (!file.is_open()) {
        throw std::runtime_error("Error opening file");
        return;
    }
    const int nAtms = mol.nAtoms();
    file << nAtms << std::endl; 
    file << "COMMENT::Generated by ChemToolKit written by Dr B.T Speake" << std::endl;
    for (int i = 0; i < nAtms; i++) {
        ctkData::Atom* atm = mol.getAtom(i);
        file << atm->getSymbol() << "    " << atm->getPosition()[0] << "    " << atm->getPosition()[1] << "    " << atm->getPosition()[2] << std::endl;
    }
    file.close();
}